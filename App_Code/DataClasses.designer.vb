'------------------------------------------------------------------------------
' <auto-generated>
'     Dieser Code wurde von einem Tool generiert.
'     Laufzeitversion:4.0.30319.225
'
'     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
'     der Code erneut generiert wird.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="workplace")>  _
Partial Public Class DataClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definitionen der Erweiterungsmethoden"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertProjects(instance As Projects)
    End Sub
  Partial Private Sub UpdateProjects(instance As Projects)
    End Sub
  Partial Private Sub DeleteProjects(instance As Projects)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("workplaceConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Projects() As System.Data.Linq.Table(Of Projects)
		Get
			Return Me.GetTable(Of Projects)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Projects")>  _
Partial Public Class Projects
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _projectID As System.Guid
	
	Private _Name As String
	
	Private _Street As String
	
	Private _Zip As String
	
	Private _Town As String
	
	Private _ContactID As System.Nullable(Of System.Guid)
	
	Private _Phone As String
	
	Private _Fax As String
	
	Private _licenceID As System.Nullable(Of System.Guid)
	
	Private _isActive As System.Nullable(Of Boolean)
	
    #Region "Definitionen der Erweiterungsmethoden"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnprojectIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnprojectIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnStreetChanging(value As String)
    End Sub
    Partial Private Sub OnStreetChanged()
    End Sub
    Partial Private Sub OnZipChanging(value As String)
    End Sub
    Partial Private Sub OnZipChanged()
    End Sub
    Partial Private Sub OnTownChanging(value As String)
    End Sub
    Partial Private Sub OnTownChanged()
    End Sub
    Partial Private Sub OnContactIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnContactIDChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnFaxChanging(value As String)
    End Sub
    Partial Private Sub OnFaxChanged()
    End Sub
    Partial Private Sub OnlicenceIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnlicenceIDChanged()
    End Sub
    Partial Private Sub OnisActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_projectID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property projectID() As System.Guid
		Get
			Return Me._projectID
		End Get
		Set
			If ((Me._projectID = value)  _
						= false) Then
				Me.OnprojectIDChanging(value)
				Me.SendPropertyChanging
				Me._projectID = value
				Me.SendPropertyChanged("projectID")
				Me.OnprojectIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Street", DbType:="NVarChar(250)")>  _
	Public Property Street() As String
		Get
			Return Me._Street
		End Get
		Set
			If (String.Equals(Me._Street, value) = false) Then
				Me.OnStreetChanging(value)
				Me.SendPropertyChanging
				Me._Street = value
				Me.SendPropertyChanged("Street")
				Me.OnStreetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Zip", DbType:="NVarChar(50)")>  _
	Public Property Zip() As String
		Get
			Return Me._Zip
		End Get
		Set
			If (String.Equals(Me._Zip, value) = false) Then
				Me.OnZipChanging(value)
				Me.SendPropertyChanging
				Me._Zip = value
				Me.SendPropertyChanged("Zip")
				Me.OnZipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Town", DbType:="NVarChar(150)")>  _
	Public Property Town() As String
		Get
			Return Me._Town
		End Get
		Set
			If (String.Equals(Me._Town, value) = false) Then
				Me.OnTownChanging(value)
				Me.SendPropertyChanging
				Me._Town = value
				Me.SendPropertyChanged("Town")
				Me.OnTownChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactID", DbType:="UniqueIdentifier")>  _
	Public Property ContactID() As System.Nullable(Of System.Guid)
		Get
			Return Me._ContactID
		End Get
		Set
			If (Me._ContactID.Equals(value) = false) Then
				Me.OnContactIDChanging(value)
				Me.SendPropertyChanging
				Me._ContactID = value
				Me.SendPropertyChanged("ContactID")
				Me.OnContactIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(50)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fax", DbType:="NVarChar(50)")>  _
	Public Property Fax() As String
		Get
			Return Me._Fax
		End Get
		Set
			If (String.Equals(Me._Fax, value) = false) Then
				Me.OnFaxChanging(value)
				Me.SendPropertyChanging
				Me._Fax = value
				Me.SendPropertyChanged("Fax")
				Me.OnFaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_licenceID", DbType:="UniqueIdentifier")>  _
	Public Property licenceID() As System.Nullable(Of System.Guid)
		Get
			Return Me._licenceID
		End Get
		Set
			If (Me._licenceID.Equals(value) = false) Then
				Me.OnlicenceIDChanging(value)
				Me.SendPropertyChanging
				Me._licenceID = value
				Me.SendPropertyChanged("licenceID")
				Me.OnlicenceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isActive", DbType:="Bit")>  _
	Public Property isActive() As System.Nullable(Of Boolean)
		Get
			Return Me._isActive
		End Get
		Set
			If (Me._isActive.Equals(value) = false) Then
				Me.OnisActiveChanging(value)
				Me.SendPropertyChanging
				Me._isActive = value
				Me.SendPropertyChanged("isActive")
				Me.OnisActiveChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
